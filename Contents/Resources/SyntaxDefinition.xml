<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
  <head>
    <name>Go</name>
    <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@]]></charsintokens>
  </head>
  <states>
    <default id="Base" font-style="normal" usespellchecking="yes" scope="meta.default">
      <keywords id="Keywords" casesensitive="no" useforautocomplete="yes" scope="keyword">
        <string>break</string>
        <string>case</string>
        <string>chan</string>
        <string>const</string>
        <string>continue</string>
        <string>default</string>
        <string>defer</string>
        <string>else</string>
        <string>fallthrough</string>
        <string>for</string>
        <string>func</string>
        <string>go</string>
        <string>goto</string>
        <string>if</string>
        <string>import</string>
        <string>interface</string>
        <string>map</string>
        <string>package</string>
        <string>range</string>
        <string>return</string>
        <string>select</string>
        <string>struct</string>
        <string>switch</string>
        <string>type</string>
        <string>var</string>
      </keywords>
      <keywords id="TypeKeywords" useforautocomplete="yes" scope="keyword.type">
        <string>bool</string>
        <string>uint8</string>
        <string>uint16</string>
        <string>uint32</string>
        <string>uint64</string>
        <string>int8</string>
        <string>int16</string>
        <string>int32</string>
        <string>int64</string>
        <string>float32</string>
        <string>float64</string>
        <string>complex64</string>
        <string>complex128</string>
        <string>uint</string>
        <string>int</string>
        <string>uintptr</string>
        <string>byte</string>
        <string>iota</string>
        <string>rune</string>
        <string>string</string>
        <string>nil</string>
      </keywords>
      <keywords id="Numbers" scope="constant.numeric">
        <regex>(?&lt;![\w\d\._])((?:(?:(?:[0-9]+\.[0-9]*)|(\.[0-9]+))(?:[eE][+\-]?[0-9]+)?[fFlL]?)|(?:(?:(?:[1-9][0-9]*)|0(?:[1-7][0-7]*)?|(?:0[xX][0-9a-fA-F]+))(?:(?:[uU][lL]?)|(?:[lL][uU]?))?))(?![\w\d\._])</regex>
      </keywords>
      <keywords id="Operators" useforautocomplete="no" scope="language.operator">
        <regex>([\+\-\*\\\=\|\!\&lt;\&gt;])</regex>
      </keywords>
      <state id="Single Comment" scope="comment">
        <begin>
          <regex>\/\/</regex>
        </begin>
        <end>
          <regex>[\n\r]</regex>
        </end>
      </state>
      <state id="Block Comment" type="comment" foldable="yes" scope="comment">
          <begin>
            <regex>/\*</regex>
          </begin>
          <end>
            <regex>\*/</regex>
          </end>
      </state>
      <state id="String" scope="style.value.string">
        <begin>
          <regex>"</regex>
        </begin>
        <end>
          <regex>(?&lt;!\\)(\\\\)*"</regex>
        </end>
      </state>
      <state id="SingleString" scope="style.value.string">
        <begin>
          <string>'</string>
        </begin>
        <end>
          <regex>(?&lt;!\\)(\\\\)*'</regex>
        </end>
      </state>
    </default>
  </states>
</syntax>
